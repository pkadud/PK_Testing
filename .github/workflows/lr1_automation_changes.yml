name: Capture Delta Changes

on:
  workflow_dispatch:
    inputs:
      start_date:
        description: 'Start date (YYYY-MM-DD)'
        required: true
      end_date:
        description: 'End date (YYYY-MM-DD)'
        required: true
      excluded_paths:
        description: 'Comma-separated list of folders to exclude (e.g., dev/,test/)'
        required: false

jobs:
  capture_changes:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main

      # Step 2: Get list of modified files between start_date and end_date
      - name: Get modified files between start_date and end_date
        run: |
          START_DATE="${{ github.event.inputs.start_date }}"
          END_DATE="${{ github.event.inputs.end_date }}"
          EXCLUDED_PATHS="${{ github.event.inputs.excluded_paths }}"

          # Fetch all commits and remove shallow history (if necessary)
          git fetch --prune --unshallow

          # Get list of modified files between the specified dates
          modified_files=$(git log --since="$START_DATE" --until="$END_DATE" --pretty=format: --name-only | sort | uniq)

          if [ -n "$EXCLUDED_PATHS" ]; then
            IFS=',' read -ra EXCLUDES <<< "$EXCLUDED_PATHS"
            for exclude in "${EXCLUDES[@]}"; do
              modified_files=$(echo "$modified_files" | grep -v "^$exclude")
            done
          fi

          echo "Modified files between $START_DATE and $END_DATE (excluding specified folders):"
          echo "$modified_files"

          if [ -z "$modified_files" ]; then
            echo "No relevant files modified."
          fi

      # Step 3: Show commit details for each modified file and display changes made
      - name: Show commit details for modified files and display changes
        run: |
          START_DATE="${{ github.event.inputs.start_date }}"
          END_DATE="${{ github.event.inputs.end_date }}"
          EXCLUDED_PATHS="${{ github.event.inputs.excluded_paths }}"

          modified_files=$(git log --since="$START_DATE" --until="$END_DATE" --pretty=format: --name-only | sort | uniq)

          if [ -n "$EXCLUDED_PATHS" ]; then
            IFS=',' read -ra EXCLUDES <<< "$EXCLUDED_PATHS"
            for exclude in "${EXCLUDES[@]}"; do
              modified_files=$(echo "$modified_files" | grep -v "^$exclude")
            done
          fi

          if [ -z "$modified_files" ]; then
            echo "No files have been modified between $START_DATE and $END_DATE."
          else
            for file in $modified_files; do
              echo "Commit details and changes for $file between $START_DATE and $END_DATE:"
              git log --since="$START_DATE" --until="$END_DATE" --pretty=format:"%h - %an, %ad : %s" -p -- $file
              echo "-----------------------------------------------------------"
            done
          fi

      # Step 4: Generate summary report of changes
      - name: Generate summary report of added, removed, and modified records
        run: |
          START_DATE="${{ github.event.inputs.start_date }}"
          END_DATE="${{ github.event.inputs.end_date }}"
          EXCLUDED_PATHS="${{ github.event.inputs.excluded_paths }}"
          REPORT_FILE="delta_change_report.txt"

          echo "Generating delta change report from $START_DATE to $END_DATE" > $REPORT_FILE
          echo "==========================================================" >> $REPORT_FILE

          modified_files=$(git log --since="$START_DATE" --until="$END_DATE" --pretty=format: --name-only | sort | uniq)

          if [ -n "$EXCLUDED_PATHS" ]; then
            IFS=',' read -ra EXCLUDES <<< "$EXCLUDED_PATHS"
            for exclude in "${EXCLUDES[@]}"; do
              modified_files=$(echo "$modified_files" | grep -v "^$exclude")
            done
          fi

          if [ -z "$modified_files" ]; then
            echo "No files have been modified between $START_DATE and $END_DATE." >> $REPORT_FILE
          else
            for file in $modified_files; do
              echo "File: $file" >> $REPORT_FILE
              echo "--------------------------" >> $REPORT_FILE

              # Get full detailed diffs (added/removed context and code) for the file
              git log --since="$START_DATE" --until="$END_DATE" -p -- $file >> $REPORT_FILE

              echo "" >> $REPORT_FILE
              echo "----------------------------------------------------------" >> $REPORT_FILE
              echo "" >> $REPORT_FILE
            done
          fi

          echo "Report saved to $REPORT_FILE"

      # Step 5: Upload report to GitHub Actions summary (visible in UI)
      - name: Add summary to GitHub Actions output
        run: |
          echo "### Delta Change Report" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat delta_change_report.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      # Step 6: Upload delta report as artifact
      - name: Upload delta change report
        uses: actions/upload-artifact@v4
        with:
          name: delta-change-report
          path: delta_change_report.txt
