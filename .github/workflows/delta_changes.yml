name: Capture Delta Changes

on:
  workflow_dispatch:
    inputs:
      start_date:
        description: 'Start date (YYYY-MM-DD)'
        required: true
      end_date:
        description: 'End date (YYYY-MM-DD)'
        required: true

jobs:
  capture_changes:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: main

      # Step 2: Get list of modified files between start_date and end_date
      - name: Get modified files between start_date and end_date
        run: |
          START_DATE="${{ github.event.inputs.start_date }}"
          END_DATE="${{ github.event.inputs.end_date }}"

          git fetch --prune --unshallow

          modified_files=$(git log --since="$START_DATE" --until="$END_DATE" --pretty=format: --name-only | sort | uniq)

          echo "Modified files between $START_DATE and $END_DATE:"
          echo "$modified_files"

          if [ -z "$modified_files" ]; then
            echo "No relevant files modified."
          fi

      # Step 3: Show detailed file changes
      - name: Show detailed file changes (added, modified, deleted)
        run: |
          START_DATE="${{ github.event.inputs.start_date }}"
          END_DATE="${{ github.event.inputs.end_date }}"

          echo "Checking changes between $START_DATE and $END_DATE..."

          echo "üîç Gathering added files..."
          added_files=$(git log --since="$START_DATE" --until="$END_DATE" --diff-filter=A --pretty=format: --name-only | sort | uniq)

          echo "üîç Gathering modified files..."
          modified_files=$(git log --since="$START_DATE" --until="$END_DATE" --diff-filter=M --pretty=format: --name-only | sort | uniq)

          echo "üîç Gathering deleted files..."
          deleted_files=$(git log --since="$START_DATE" --until="$END_DATE" --diff-filter=D --pretty=format: --name-only | sort | uniq)

          if [ -z "$added_files$modified_files$deleted_files" ]; then
            echo "‚úÖ No file changes detected between $START_DATE and $END_DATE."
          else
            echo ""
            echo "üü¢ Added Files:"
            for file in $added_files; do
              echo "‚ûï $file"
              git log --since="$START_DATE" --until="$END_DATE" --diff-filter=A --pretty=format:"%h - %an, %ad : %s" -p -- "$file"
              echo "-----------------------------------------------------------"
            done

            echo ""
            echo "üìù Modified Files:"
            for file in $modified_files; do
              echo "‚úèÔ∏è  $file"
              git log --since="$START_DATE" --until="$END_DATE" --diff-filter=M --pretty=format:"%h - %an, %ad : %s" -p -- "$file"
              echo "-----------------------------------------------------------"
            done

            echo ""
            echo "‚ùå Deleted Files:"
            if [ -z "$deleted_files" ]; then
              echo "None"
            else
              for file in $deleted_files; do
                echo "üóëÔ∏è  $file"

                # Find the commit where the file was deleted
                delete_commit=$(git log --since="$START_DATE" --until="$END_DATE" --diff-filter=D --pretty=format:"%H" -- "$file" | head -n 1)

                if [ -n "$delete_commit" ]; then
                  # Find last commit before deletion where file existed
                  last_good_commit=$(git rev-list "$delete_commit"^ -- "$file" | head -n 1)

                  if [ -n "$last_good_commit" ]; then
                    echo "üîé Last known version in commit: $last_good_commit"
                    echo "üìÑ Contents of $file before deletion:"
                    echo "-----------------------------------------------------------"
                    git show "$last_good_commit:$file" || echo "‚ö†Ô∏è Could not retrieve contents (binary or inaccessible)."
                  else
                    echo "‚ö†Ô∏è No earlier commit found containing this file."
                  fi
                else
                  echo "‚ö†Ô∏è Could not determine deletion commit for $file."
                fi

                echo "-----------------------------------------------------------"
              done
            fi
          fi
